def gitCommit() {
        sh "git rev-parse HEAD > GIT_COMMIT"
        def gitCommit = readFile('GIT_COMMIT').trim()
        sh "rm -f GIT_COMMIT"
        return gitCommit
    }

def answerQuestion = ''

    node {
        // Checkout source code from Git
        stage 'Checkout'
        checkout scm

//        clean all
        try {
          stage('Destroy') {
                sh "oc login -u admin -p redhat12"
                sh "oc delete project mf-openshift" }
}
          catch(e) {
                     build_ok = false
                     echo e.toString()
} 

	// Analyse the code for vulnerabilities using SCA
	stage 'SCA'
	sh "/opt/Fortify/Fortify_SCA_and_Apps_19.1.0/bin/sourceanalyzer -b openshift-mf -clean"
	sh "/opt/Fortify/Fortify_SCA_and_Apps_19.1.0/bin/sourceanalyzer -b openshift-mf *.php"
	sh "/opt/Fortify/Fortify_SCA_and_Apps_19.1.0/bin/sourceanalyzer -b openshift-mf -scan -f openshift-mf.fpr"
	sh "/opt/Fortify/Fortify_SCA_and_Apps_19.1.0/bin/ReportGenerator -format xml -source openshift-mf.fpr -f test.xml"
	sh "/opt/Fortify/Fortify_SCA_and_Apps_19.1.0/bin/ReportGenerator -format rtf -source openshift-mf.fpr -f test.rtf"
	sh "cp test.rtf /var/lib/jenkins"

        script {
          answerQuestion = sh (returnStdout: true, script: 'xmllint --xpath "string(//GroupingSection/@count)" test.xml')
        } 

//	sh "curl -v -u admin:admin123 --upload-file test.rtf http://nexus.example.local/content/sites/safe/report`date +%F-%T`.rtf"

	echo "${answerQuestion}"

        if ( answerQuestion != "" ) {
	  echo 'SCM has some critical findings - terminating build... look at the rtf report @ http://nexus.example.local/content/sites/safe/'
	currentBuild.result = 'FAILURE'
	sh "exit ${answerQuestion}" 
	}

        // Build Docker image
        stage 'Build'
        sh "docker build -t rhquay.example.local/admin/php:${gitCommit()} ."

        // Login to DTR 
        stage 'Login'
        withCredentials(
            [[
                $class: 'UsernamePasswordMultiBinding',
                credentialsId: 'dtr',
                passwordVariable: 'DTR_PASSWORD',
                usernameVariable: 'DTR_USERNAME'
            ]]
        ){ 
        sh "docker login -u ${env.DTR_USERNAME} -p ${env.DTR_PASSWORD}  rhquay.example.local"}

        // Push the image 
        stage 'Push'
        sh "docker push rhquay.example.local/admin/php:${gitCommit()}"

        // run the container
        stage 'Deploy'
        sh "oc login https://192.168.12.181:8443 -u admin -p redhat12"
        sh "oc new-project mf-openshift"
        sh "oc project mf-openshift"
    	sh "oc adm  policy add-scc-to-user anyuid -z default"
        sh "oc new-app rhquay.example.local/admin/php:${gitCommit()} --insecure-registry=true"
	sh "oc expose svc/php --hostname=openshift-mf.example.local"
    }

// remember to copy the dtr cert in /etc/pki/ca-trust/source/anchors
// run update-ca-trust
// run systemctl restart atomic-openshift-*
